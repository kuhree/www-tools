name: Docker

on:
  schedule:
   - cron: "0 0 * * *" # Nightly
  push:
    tags: 
      - '*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ${{ github.server_url }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    concurrency: group:docker:${{ github.ref }}
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_tags: ${{ steps.meta.outputs.tags || steps.meta-pr.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Login to Registry (${{ env.REGISTRY }})
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.LITTLEVIBE_ACCESS_TOKEN }}

      - name: Configure Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=schedule
            type=ref,event=branch,enabled=${{ startsWith(github.ref, 'refs/heads')}}
            type=ref,event=tag,enabled=${{ startsWith(github.ref, 'refs/tags') }}
            type=ref,event=pr,enabled=${{ startsWith(github.ref, 'refs/pull') }}
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.source="${{ github.server_url }}/${{ github.repository }}"

      - name: Build and Push
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Notify Status
        if: always()
        run: |
          STATUS_EMOJI="${{ job.status == 'success' && '✅' || '❌' }}"
          STATUS_TEXT="${{ job.status == 'success' && 'white_checkmark' || 'x' }}"

          curl \
            -H "Authorization: Bearer ${{ secrets.NTFY_API_TOKEN }}" \
            -H "Title: Docker Build: $STATUS_EMOJI" \
            -H "Tags: whale,cd,${STATUS_TEXT}" \
            -H "Priority: ${{ job.status == 'success' && '3' || '5' }}" \
            -H "Click: ${{ github.server_url }}/~/packages/container/${{ env.IMAGE_NAME }}${{ step.meta.outputs.tags | split(' ')[0] }}" \
            -H "Markdown: yes" \
            -d "### Build Details
            - **Repository**: \`${{ github.repository }}\`
            - **Branch/Tag**: \`${{ github.ref_name }}\`
            - **Commit**: [\`${GITHUB_SHA:0:7}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - **Run**: [\`${{ github.run_number }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_number }})
            - **Image Tags**: \`${{ steps.meta.outputs.tags }}\`

            ${STATUS_EMOJI} Docker Publish **${{ job.status }}**

            [View Container](${{ github.server_url }}/~/packages/container/${{ env.IMAGE_NAME }}${{ step.meta.outputs.tags | split(' ')[0] }})" \
            ${{ secrets.NTFY_URL }}
